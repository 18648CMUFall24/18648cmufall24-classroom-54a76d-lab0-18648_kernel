1.
i.User space processes initiate systemcall requests such as read().
ii. User app interrupted, switching from user mode to kernel mode, for example by int 0x80.
iii. Executing kernel code based on the system call, for example, reads specific amount of bytes from file system and store.
     into user space buffer.
iv. Prepare return values (restore user space states like registers)
v. Switching context to user space.
vi. User space processes resume.

2. Re-entrancy refers to the ability that a function or subroutine can be interrupted during execution and resumed safely(re-enter) before finishing.
And thread-safety refers to the property that a function of a block of code can be accessed concurrently by multiple threads and ensured correctly.

3. It means a kernel allows other tasks for example higher priority ones can interrupt current task during execution.
Yes (maybe, tbd)

4. When multiple threads or process are concurrently accessing and potentially modify same data.

5. Spinlocks, mutexes, read-writee locks and etc.

6. It casts a member of a structure out to the containing structure.